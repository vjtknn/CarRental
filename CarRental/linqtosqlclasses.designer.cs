#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CarRental
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Cars")]
	public partial class linqtosqlclassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCars_Eqipment(Cars_Eqipment instance);
    partial void UpdateCars_Eqipment(Cars_Eqipment instance);
    partial void DeleteCars_Eqipment(Cars_Eqipment instance);
    partial void InsertEquipment(Equipment instance);
    partial void UpdateEquipment(Equipment instance);
    partial void DeleteEquipment(Equipment instance);
    partial void InsertCar(Car instance);
    partial void UpdateCar(Car instance);
    partial void DeleteCar(Car instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertCars_Customer(Cars_Customer instance);
    partial void UpdateCars_Customer(Cars_Customer instance);
    partial void DeleteCars_Customer(Cars_Customer instance);
    #endregion
		
		public linqtosqlclassesDataContext() : 
				base(global::CarRental.Properties.Settings.Default.CarsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public linqtosqlclassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public linqtosqlclassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public linqtosqlclassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public linqtosqlclassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Cars_Eqipment> Cars_Eqipments
		{
			get
			{
				return this.GetTable<Cars_Eqipment>();
			}
		}
		
		public System.Data.Linq.Table<Equipment> Equipments
		{
			get
			{
				return this.GetTable<Equipment>();
			}
		}
		
		public System.Data.Linq.Table<Car> Cars
		{
			get
			{
				return this.GetTable<Car>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Cars_Customer> Cars_Customers
		{
			get
			{
				return this.GetTable<Cars_Customer>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cars_Eqipments")]
	public partial class Cars_Eqipment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Cars_id;
		
		private System.Nullable<int> _Equipments_id;
		
		private EntitySet<Cars_Customer> _Cars_Customers;
		
		private EntityRef<Equipment> _Equipment;
		
		private EntityRef<Car> _Car;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCars_idChanging(System.Nullable<int> value);
    partial void OnCars_idChanged();
    partial void OnEquipments_idChanging(System.Nullable<int> value);
    partial void OnEquipments_idChanged();
    #endregion
		
		public Cars_Eqipment()
		{
			this._Cars_Customers = new EntitySet<Cars_Customer>(new Action<Cars_Customer>(this.attach_Cars_Customers), new Action<Cars_Customer>(this.detach_Cars_Customers));
			this._Equipment = default(EntityRef<Equipment>);
			this._Car = default(EntityRef<Car>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cars_id", DbType="Int")]
		public System.Nullable<int> Cars_id
		{
			get
			{
				return this._Cars_id;
			}
			set
			{
				if ((this._Cars_id != value))
				{
					if (this._Car.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCars_idChanging(value);
					this.SendPropertyChanging();
					this._Cars_id = value;
					this.SendPropertyChanged("Cars_id");
					this.OnCars_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Equipments_id", DbType="Int")]
		public System.Nullable<int> Equipments_id
		{
			get
			{
				return this._Equipments_id;
			}
			set
			{
				if ((this._Equipments_id != value))
				{
					if (this._Equipment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEquipments_idChanging(value);
					this.SendPropertyChanging();
					this._Equipments_id = value;
					this.SendPropertyChanged("Equipments_id");
					this.OnEquipments_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cars_Eqipment_Cars_Customer", Storage="_Cars_Customers", ThisKey="Id", OtherKey="Cars_Eqipment")]
		public EntitySet<Cars_Customer> Cars_Customers
		{
			get
			{
				return this._Cars_Customers;
			}
			set
			{
				this._Cars_Customers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Equipment_Cars_Eqipment", Storage="_Equipment", ThisKey="Equipments_id", OtherKey="Id", IsForeignKey=true)]
		public Equipment Equipment
		{
			get
			{
				return this._Equipment.Entity;
			}
			set
			{
				Equipment previousValue = this._Equipment.Entity;
				if (((previousValue != value) 
							|| (this._Equipment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Equipment.Entity = null;
						previousValue.Cars_Eqipments.Remove(this);
					}
					this._Equipment.Entity = value;
					if ((value != null))
					{
						value.Cars_Eqipments.Add(this);
						this._Equipments_id = value.Id;
					}
					else
					{
						this._Equipments_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Equipment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_Cars_Eqipment", Storage="_Car", ThisKey="Cars_id", OtherKey="Id", IsForeignKey=true)]
		public Car Car
		{
			get
			{
				return this._Car.Entity;
			}
			set
			{
				Car previousValue = this._Car.Entity;
				if (((previousValue != value) 
							|| (this._Car.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Car.Entity = null;
						previousValue.Cars_Eqipments.Remove(this);
					}
					this._Car.Entity = value;
					if ((value != null))
					{
						value.Cars_Eqipments.Add(this);
						this._Cars_id = value.Id;
					}
					else
					{
						this._Cars_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Car");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars_Customers(Cars_Customer entity)
		{
			this.SendPropertyChanging();
			entity.Cars_Eqipment1 = this;
		}
		
		private void detach_Cars_Customers(Cars_Customer entity)
		{
			this.SendPropertyChanging();
			entity.Cars_Eqipment1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Equipments")]
	public partial class Equipment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Cars_Eqipment> _Cars_Eqipments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Equipment()
		{
			this._Cars_Eqipments = new EntitySet<Cars_Eqipment>(new Action<Cars_Eqipment>(this.attach_Cars_Eqipments), new Action<Cars_Eqipment>(this.detach_Cars_Eqipments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(150)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Equipment_Cars_Eqipment", Storage="_Cars_Eqipments", ThisKey="Id", OtherKey="Equipments_id")]
		public EntitySet<Cars_Eqipment> Cars_Eqipments
		{
			get
			{
				return this._Cars_Eqipments;
			}
			set
			{
				this._Cars_Eqipments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars_Eqipments(Cars_Eqipment entity)
		{
			this.SendPropertyChanging();
			entity.Equipment = this;
		}
		
		private void detach_Cars_Eqipments(Cars_Eqipment entity)
		{
			this.SendPropertyChanging();
			entity.Equipment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cars")]
	public partial class Car : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Brand;
		
		private string _Model;
		
		private System.Nullable<int> _Seats;
		
		private EntitySet<Cars_Eqipment> _Cars_Eqipments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBrandChanging(string value);
    partial void OnBrandChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnSeatsChanging(System.Nullable<int> value);
    partial void OnSeatsChanged();
    #endregion
		
		public Car()
		{
			this._Cars_Eqipments = new EntitySet<Cars_Eqipment>(new Action<Cars_Eqipment>(this.attach_Cars_Eqipments), new Action<Cars_Eqipment>(this.detach_Cars_Eqipments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brand", DbType="VarChar(50)")]
		public string Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				if ((this._Brand != value))
				{
					this.OnBrandChanging(value);
					this.SendPropertyChanging();
					this._Brand = value;
					this.SendPropertyChanged("Brand");
					this.OnBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="VarChar(50)")]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seats", DbType="Int")]
		public System.Nullable<int> Seats
		{
			get
			{
				return this._Seats;
			}
			set
			{
				if ((this._Seats != value))
				{
					this.OnSeatsChanging(value);
					this.SendPropertyChanging();
					this._Seats = value;
					this.SendPropertyChanged("Seats");
					this.OnSeatsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_Cars_Eqipment", Storage="_Cars_Eqipments", ThisKey="Id", OtherKey="Cars_id")]
		public EntitySet<Cars_Eqipment> Cars_Eqipments
		{
			get
			{
				return this._Cars_Eqipments;
			}
			set
			{
				this._Cars_Eqipments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars_Eqipments(Cars_Eqipment entity)
		{
			this.SendPropertyChanging();
			entity.Car = this;
		}
		
		private void detach_Cars_Eqipments(Cars_Eqipment entity)
		{
			this.SendPropertyChanging();
			entity.Car = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Firts_name;
		
		private string _Last_name;
		
		private EntitySet<Cars_Customer> _Cars_Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirts_nameChanging(string value);
    partial void OnFirts_nameChanged();
    partial void OnLast_nameChanging(string value);
    partial void OnLast_nameChanged();
    #endregion
		
		public Customer()
		{
			this._Cars_Customers = new EntitySet<Cars_Customer>(new Action<Cars_Customer>(this.attach_Cars_Customers), new Action<Cars_Customer>(this.detach_Cars_Customers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firts_name", DbType="VarChar(50)")]
		public string Firts_name
		{
			get
			{
				return this._Firts_name;
			}
			set
			{
				if ((this._Firts_name != value))
				{
					this.OnFirts_nameChanging(value);
					this.SendPropertyChanging();
					this._Firts_name = value;
					this.SendPropertyChanged("Firts_name");
					this.OnFirts_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_name", DbType="VarChar(50)")]
		public string Last_name
		{
			get
			{
				return this._Last_name;
			}
			set
			{
				if ((this._Last_name != value))
				{
					this.OnLast_nameChanging(value);
					this.SendPropertyChanging();
					this._Last_name = value;
					this.SendPropertyChanged("Last_name");
					this.OnLast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Cars_Customer", Storage="_Cars_Customers", ThisKey="Id", OtherKey="Customer")]
		public EntitySet<Cars_Customer> Cars_Customers
		{
			get
			{
				return this._Cars_Customers;
			}
			set
			{
				this._Cars_Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars_Customers(Cars_Customer entity)
		{
			this.SendPropertyChanging();
			entity.Customer1 = this;
		}
		
		private void detach_Cars_Customers(Cars_Customer entity)
		{
			this.SendPropertyChanging();
			entity.Customer1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cars_Customer")]
	public partial class Cars_Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Cars_Eqipment;
		
		private System.Nullable<int> _Customer;
		
		private EntityRef<Customer> _Customer1;
		
		private EntityRef<Cars_Eqipment> _Cars_Eqipment1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCars_EqipmentChanging(System.Nullable<int> value);
    partial void OnCars_EqipmentChanged();
    partial void OnCustomerChanging(System.Nullable<int> value);
    partial void OnCustomerChanged();
    #endregion
		
		public Cars_Customer()
		{
			this._Customer1 = default(EntityRef<Customer>);
			this._Cars_Eqipment1 = default(EntityRef<Cars_Eqipment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cars_Eqipment", DbType="Int")]
		public System.Nullable<int> Cars_Eqipment
		{
			get
			{
				return this._Cars_Eqipment;
			}
			set
			{
				if ((this._Cars_Eqipment != value))
				{
					if (this._Cars_Eqipment1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCars_EqipmentChanging(value);
					this.SendPropertyChanging();
					this._Cars_Eqipment = value;
					this.SendPropertyChanged("Cars_Eqipment");
					this.OnCars_EqipmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer", DbType="Int")]
		public System.Nullable<int> Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					if (this._Customer1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerChanging(value);
					this.SendPropertyChanging();
					this._Customer = value;
					this.SendPropertyChanged("Customer");
					this.OnCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Cars_Customer", Storage="_Customer1", ThisKey="Customer", OtherKey="Id", IsForeignKey=true)]
		public Customer Customer1
		{
			get
			{
				return this._Customer1.Entity;
			}
			set
			{
				Customer previousValue = this._Customer1.Entity;
				if (((previousValue != value) 
							|| (this._Customer1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer1.Entity = null;
						previousValue.Cars_Customers.Remove(this);
					}
					this._Customer1.Entity = value;
					if ((value != null))
					{
						value.Cars_Customers.Add(this);
						this._Customer = value.Id;
					}
					else
					{
						this._Customer = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cars_Eqipment_Cars_Customer", Storage="_Cars_Eqipment1", ThisKey="Cars_Eqipment", OtherKey="Id", IsForeignKey=true)]
		public Cars_Eqipment Cars_Eqipment1
		{
			get
			{
				return this._Cars_Eqipment1.Entity;
			}
			set
			{
				Cars_Eqipment previousValue = this._Cars_Eqipment1.Entity;
				if (((previousValue != value) 
							|| (this._Cars_Eqipment1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cars_Eqipment1.Entity = null;
						previousValue.Cars_Customers.Remove(this);
					}
					this._Cars_Eqipment1.Entity = value;
					if ((value != null))
					{
						value.Cars_Customers.Add(this);
						this._Cars_Eqipment = value.Id;
					}
					else
					{
						this._Cars_Eqipment = default(Nullable<int>);
					}
					this.SendPropertyChanged("Cars_Eqipment1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
